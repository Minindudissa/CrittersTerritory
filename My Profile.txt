import { UserAuthContext } from "@/context/UserAuthContext";
import PageLoading from "@/pages/PageLoading";
import {
  genderSearch,
  UpdateUser,
  countrySearch,
  userPasswordChange,
  createUpdateAddress,
  searchAddress,
} from "@/services";
import { useContext, useEffect, useState } from "react";

function MyProfile() {
  const { user, setUser } = useContext(UserAuthContext);
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [genderList, setGenderList] = useState([]);
  const [gender, setGender] = useState("0");
  const [mobile, setMobile] = useState("");
  const [email, setEmail] = useState("");
  const [currentPassword, setCurrentPassword] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [isCurrentPasswordVisible, setIsCurrentPasswordVisible] =
    useState(false);
  const [isNewPasswordVisible, setIsNewPasswordVisible] = useState(false);
  const [isConfirmPasswordVisible, setIsConfirmPasswordVisible] =
    useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [errorMsg1, setErrorMsg1] = useState(null);
  const [successMsg1, setSuccessMsg1] = useState(null);
  const [errorMsg2, setErrorMsg2] = useState(null);
  const [successMsg2, setSuccessMsg2] = useState(null);
  const [errorMsg3, setErrorMsg3] = useState(null);
  const [successMsg3, setSuccessMsg3] = useState(null);

  const [addressLine1, setAddressLine1] = useState("");
  const [addressLine2, setAddressLine2] = useState("");
  const [city, setCity] = useState("");
  const [province, setProvince] = useState("");
  const [postalCode, setPostalCode] = useState("");
  const [country, setCountry] = useState(0);
  const [countryList, setCounrtyList] = useState([]);

  const [addressData, setAddressData] = useState([]);

  useEffect(() => {
    if (user) {
      setFirstName(user?.firstName || "");
      setLastName(user?.lastName || "");
      setEmail(user?.email || "");
      setGender(user?.genderId || "0");
      setMobile(user?.mobile || "");
      addressSearch();
    }
  }, [user]);

  useEffect(() => {
    if (addressData?.data) {
      setAddressLine1(addressData?.data.line1 || "");
      setAddressLine2(addressData?.data.line2 || "");
      setCity(addressData?.data.city || "");
      setProvince(addressData?.data.province || "");
      setPostalCode(addressData?.data.postalCode || "");
      setCountry(addressData?.data.countryId || 0);
    }
  }, [addressData]);

  useEffect(() => {
    seachCountry();
    seachGender();
  }, []);

  async function handlePersonalDataOnSubmit(event) {
    event.preventDefault();
    if (mobile !== "" && !/^\+?[1-9]\d{1,14}$/.test(mobile)) {
      setSuccessMsg1(null);
      setErrorMsg1("Please Enter a Valid Mobile Number");
    }
    const updateUserResponse = await UpdateUser({
      email,
      updateData: { firstName, lastName, genderId: gender, mobile },
    });

    if (updateUserResponse?.success) {
      setErrorMsg1(null);
      setSuccessMsg1("Successfully Updated");
    } else {
      setSuccessMsg1(null);
      setErrorMsg1(
        updateUserResponse?.message.includes("fails to match the required")
          ? "Please Enter a Valid Mobile Number"
          : updateUserResponse?.message
      );
    }
    setTimeout(() => {
      setSuccessMsg1(null);
      setErrorMsg1(null);
    }, 3000);
  }

  async function seachGender() {
    setIsLoading(true);
    const searchGenderResponse = await genderSearch({searchData:{}});
    if (searchGenderResponse) {
      setIsLoading(false);
      setGenderList(searchGenderResponse?.genderList);
    }
  }

  async function seachCountry() {
    setIsLoading(true);
    const searchCountryResponse = await countrySearch({searchData:{}});
    if (searchCountryResponse) {
      setIsLoading(false);
      setCounrtyList(searchCountryResponse?.countryList);
    }
  }

  async function addressSearch() {
    setIsLoading(true);
    const searchAddressResponse = await searchAddress({ userId: user?._id });
    if (searchAddressResponse?.success) {
      setIsLoading(false);
      setAddressData(searchAddressResponse);
    }
  }

  async function handleChangePasswordOnSubmit(event) {
    event.preventDefault();
    if (currentPassword === "") {
      setSuccessMsg2(null);
      setErrorMsg2("Please Enter Your Current Password");
    } else if (newPassword === "") {
      setSuccessMsg2(null);
      setErrorMsg2("Please Enter a new Password");
    } else if (confirmPassword === "") {
      setSuccessMsg2(null);
      setErrorMsg2("Confirm the Password You've Entered");
    } else {
      const userPasswordChangeResponse = await userPasswordChange({
        email,
        currentPassword,
        newPassword,
        confirmPassword,
      });
      if (
        userPasswordChangeResponse?.message.includes(
          '"newPassword" length must be at least 8'
        )
      ) {
        setSuccessMsg2(null);
        setErrorMsg2("New password should contain atlease 8 characters");
      } else if (
        userPasswordChangeResponse?.message.includes("Incorrect Password")
      ) {
        setSuccessMsg2(null);
        setErrorMsg2("Invalid Current Password");
      } else if (
        userPasswordChangeResponse?.message.includes("Password doesn't match")
      ) {
        setSuccessMsg2(null);
        setErrorMsg2(userPasswordChangeResponse?.message);
      } else {
        setErrorMsg2(null);
        setSuccessMsg2("Password successfully Updated");
        setTimeout(() => {
          setErrorMsg2(null);
          setSuccessMsg2(null);
        }, 3000);
      }
    }
  }
  async function handleChangeAddressOnSubmit(event) {
    event.preventDefault();
    if (addressLine1 === "") {
      setSuccessMsg3(null);
      setErrorMsg3("Please fill your Address Line 1");
    } else if (addressLine2 === "") {
      setSuccessMsg3(null);
      setErrorMsg3("Please fill your Address Line 2");
    } else if (city === "") {
      setSuccessMsg3(null);
      setErrorMsg3("Please fill your City / Town");
    } else if (province === "") {
      setSuccessMsg3(null);
      setErrorMsg3("Please fill your State / Province / Region");
    } else if (postalCode === "") {
      setSuccessMsg3(null);
      setErrorMsg3("Please fill your Postal Code / ZIP Code");
    } else if (country === 0) {
      setSuccessMsg3(null);
      setErrorMsg3("Please select your Country");
    } else {
      const createAddress = await createUpdateAddress({
        line1: addressLine1,
        line2: addressLine2,
        city,
        province,
        postalCode,
        countryId: country,
        userId: user?._id,
      });
      if (createAddress?.success) {
        setErrorMsg3(null);
        setSuccessMsg3(createAddress?.message);
      } else {
        setSuccessMsg3(null);
        setErrorMsg3(createAddress?.message);
      }
    }
    setTimeout(() => {
      setSuccessMsg3(null);
      setErrorMsg3(null);
    }, 3000);
  }
