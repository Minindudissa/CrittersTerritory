import PageLoading from "@/pages/PageLoading";
import {
  categorySearch,
  colorSearch,
  productCreate,
  productImageCreate,
  sizeSearch,
} from "@/services";
import { useEffect, useState } from "react";
import "lodash";
import "dropzone/dist/dropzone-min";

function AddProducts() {
  const [isLoading, setIsLoading] = useState(true);
  const [errorMsg, setErrorMsg] = useState(null);
  const [successMsg, setSuccessMsg] = useState(null);
  const [categoryList, setCategoryList] = useState(null);
  const [sizeList, setSizeList] = useState(null);
  const [colorList, setColorList] = useState(null);
  const [isSizeAvailable, setIsSizeAvailable] = useState(false);
  const [isColorAvailable, setIsColorAvailable] = useState(false);
  const [isHandPaintedAvailable, setIsHandPaintedAvailable] = useState(false);
  const [isMultiColorAvailable, setIsMultiColorAvailable] = useState(false);
  const [isSingleColorAvailable, setIsSingleColorAvailable] = useState(false);
  const [isDualTriColorAvailable, setIsDualTriColorAvailable] = useState(false);
  const [isGradientRainbowColorAvailable, setIsGradientRainbowColorAvailable] =
    useState(false);

  const [productType, setProductType] = useState("Digital");
  const [title, setTitle] = useState(null);
  const [description, setDescription] = useState(null);
  const [printSettings, setPrintSettings] = useState(null);
  const [basePrice, setBasePrice] = useState(null);
  const [stockType, setStockType] = useState("0");
  const [category, setCategory] = useState("0");
  const [stockCount, setStockCount] = useState(null);
  const [printerType, setPrinterType] = useState("0");
  const [colorFileAvailability, setColorFileAvailability] = useState("0");

  const [files, setFiles] = useState([]); // Store selected files
  const [uploadProgress, setUploadProgress] = useState({}); // Track upload progress for each file
  const [errorMessage, setErrorMessage] = useState("");

  const [Images, setImages] = useState([]); // Store selected Images
  const [imageUploadProgress, setImageUploadProgress] = useState({}); // Track upload progress for each file
  const [errorMessageImages, setErrorMessageImages] = useState("");
  const [file, setFile] = useState([]); // Store selected Images

  const allowedTypes = [
    "text/plain", // .txt
    "application/pdf", // .pdf
    "application/zip", // .zip
    "application/x-zip-compressed", // Alternative .zip
  ];
console.log(file);

  const allowedImageTypes = [
    "image/jpeg", // .jpg, .jpeg
    "image/png", // .png
    "image/gif", // .gif
    "video/mp4", // .mp4
    "video/avi", // .avi
    "video/mov", // .mov
    "video/mkv", // .mkv (additional video format)
  ];

  const maxImageCount = 10;
  const maxGifCount = 1;
  const maxVideoCount = 1;

  const handleImageChange = (e) => {
    setFile(e.target.files[0]);
    
    const selectedImages = Array.from(e.target.files);

    // Separate Images into categories
    const images = selectedImages.filter((file) =>
      file.type.startsWith("image/")
    );
    const gifs = selectedImages.filter((file) => file.type === "image/gif");
    const videos = selectedImages.filter((file) =>
      file.type.startsWith("video/")
    );

    // Check if the file count exceeds the limit
    if (
      images.length + gifs.length + videos.length >
      maxImageCount + maxGifCount + maxVideoCount
    ) {
      setErrorMessageImages(
        "You can upload a maximum of 10 images, 1 GIF, and 1 video."
      );
      return;
    }

    // Check individual category limits
    if (
      Images.filter((file) => file.file.type.startsWith("image/")).length +
        images.length >
      maxImageCount
    ) {
      setErrorMessageImages(
        `You can only upload a maximum of ${maxImageCount} images.`
      );
      return;
    }
    if (
      Images.filter((file) => file.file.type === "image/gif").length +
        gifs.length >
      maxGifCount
    ) {
      setErrorMessageImages(
        `You can only upload a maximum of ${maxGifCount} GIF.`
      );
      return;
    }
    if (
      Images.filter((file) => file.file.type.startsWith("video/")).length +
        videos.length >
      maxVideoCount
    ) {
      setErrorMessageImages(
        `You can only upload a maximum of ${maxVideoCount} video.`
      );
      return;
    }

    // Filter Images by allowed types
    const filteredImages = selectedImages.filter((file) =>
      allowedImageTypes.includes(file.type)
    );

    if (filteredImages.length < selectedImages.length) {
      setErrorMessageImages(
        "Some Images were ignored because they are not allowed."
      );
    } else {
      setErrorMessageImages("");
    }

    const uniqueImages = filteredImages.filter(
      (file) =>
        !Images.some((existingFile) => existingFile.file.name === file.name)
    );

    const mappedImages = uniqueImages.map((file) => ({
      file,
      id: `${file.name}-${Date.now()}`, // Unique ID for each file
      uploaded: false,
    }));

    setImages((prevImages) => [...prevImages, ...mappedImages]);

    // Simulate temporary upload progress
    mappedImages.forEach((file) => simulateTempImageUpload(file.id));
  };

  const simulateTempImageUpload = (id) => {
    let progress = 0;
    const interval = setInterval(() => {
      progress += 10;
      setImageUploadProgress((prev) => ({
        ...prev,
        [id]: progress,
      }));
      if (progress >= 100) clearInterval(interval);
    }, 100);
  };

  const handleImageRemove = (id) => {
    setImages((prevImages) => prevImages.filter((file) => file.id !== id));
    setImageUploadProgress((prev) => {
      const { [id]: _, ...rest } = prev;
      return rest;
    });
  };

  const renderFilePreview = (file) => {
    if (file.file.type.startsWith("image/")) {
      return (
        <img
          src={URL.createObjectURL(file.file)}
          alt={file.file.name}
          className="w-16 h-16 object-cover rounded"
        />
      );
    } else if (file.file.type === "image/gif") {
      return (
        <img
          src={URL.createObjectURL(file.file)}
          alt={file.file.name}
          className="w-16 h-16 object-cover rounded"
        />
      );
    } else if (file.file.type.startsWith("video/")) {
      return (
        <video width="80" height="80" controls>
          <source src={URL.createObjectURL(file.file)} type={file.file.type} />
        </video>
      );
    }
    return null;
  };
  const handleFileChange = (e) => {
    const selectedFiles = Array.from(e.target.files);
    const filteredFiles = selectedFiles.filter((file) =>
      allowedTypes.includes(file.type)
    );

    if (filteredFiles.length < selectedFiles.length) {
      setErrorMessage("Some files were ignored because they are not allowed.");
    } else {
      setErrorMessage("");
    }

    const uniqueFiles = filteredFiles.filter(
      (file) =>
        !files.some((existingFile) => existingFile.file.name === file.name)
    );

    const mappedFiles = uniqueFiles.map((file) => ({
      file,
      id: `${file.name}-${Date.now()}`, // Unique ID for each file
      uploaded: false,
    }));

    setFiles((prevFiles) => [...prevFiles, ...mappedFiles]);

    // Simulate temporary upload progress
    mappedFiles.forEach((file) => simulateTempUpload(file.id));
  };

  const simulateTempUpload = (id) => {
    let progress = 0;
    const interval = setInterval(() => {
      progress += 10;
      setUploadProgress((prev) => ({
        ...prev,
        [id]: progress,
      }));
      if (progress >= 100) clearInterval(interval);
    }, 100);
  };

  const handleRemove = (id) => {
    setFiles((prevFiles) => prevFiles.filter((file) => file.id !== id));
    setUploadProgress((prev) => {
      const { [id]: _, ...rest } = prev;
      return rest;
    });
  };

  useEffect(() => {
    async function fetchData() {
      try {
        setIsLoading(true); // Start loading

        const [categoryResponse, sizeResponse, colorResponse] =
          await Promise.all([
            categorySearch({ searchData: {} }),
            sizeSearch({ searchData: {} }),
            colorSearch({ searchData: {} }),
          ]);

        if (categoryResponse?.success) {
          setCategoryList(categoryResponse.categoryList);
        }
        if (sizeResponse?.success) {
          setSizeList(sizeResponse.sizeList);
        }
        if (colorResponse?.success) {
          setColorList(colorResponse.colorList);
        }

        setIsLoading(false); // Stop loading once all requests are done
      } catch (error) {
        console.error("Error fetching data:", error);
        setIsLoading(false);
      }
    }

    fetchData();
  }, []);

  async function handleAddProductOnSubmit(event) {
    event.preventDefault();
    const productId = "123";
    
    const formData = new FormData();
    formData.append("file",file)
    formData.append("productId",productId)
    formData.append("productType",productType)

    const createProductResponse = await productImageCreate(formData);
    console.log(createProductResponse);
    

    // if (productType === "Digital") {
    //   if (title === null) {
    //     setSuccessMsg(null);
    //     setErrorMsg("Please Enter Product Title");
    //   } else if (description === null) {
    //     setSuccessMsg(null);
    //     setErrorMsg("Please Enter Product Description");
    //   } else if (printSettings === null) {
    //     setSuccessMsg(null);
    //     setErrorMsg("Please Enter Product Print Settings");
    //   } else if (basePrice === null) {
    //     setSuccessMsg(null);
    //     setErrorMsg("Please Enter Product Base Price");
    //   } else if (stockType === "0") {
    //     setSuccessMsg(null);
    //     setErrorMsg("Please Select Product Stock Type");
    //   } else if (printerType === "0") {
    //     setSuccessMsg(null);
    //     setErrorMsg("Please Select Printer Type");
    //   } else if (colorFileAvailability === "0") {
    //     setSuccessMsg(null);
    //     setErrorMsg("Please Select Color File Availability");
    //   } else if (files.length === 0) {
    //     setSuccessMsg(null);
    //     setErrorMsg("Please Upload Relevant Files");
    //   } else if (Images.length === 0) {
    //     setSuccessMsg(null);
    //     setErrorMsg("Please Upload Relevant Images");
    //   } else if (category === "0") {
    //     setSuccessMsg(null);
    //     setErrorMsg("Please Select Product Category");
    //   } else {
    //     if (stockType === "1" && stockCount === null) {
    //       setSuccessMsg(null);
    //       setErrorMsg("Please Enter Stock Count");
    //     } else {
    //       if (isNaN(basePrice)) {
    //         setSuccessMsg(null);
    //         setErrorMsg("Please Enter a Valid Base Price");
    //       } else if (isNaN(stockCount)) {
    //         setSuccessMsg(null);
    //         setErrorMsg("Please Enter a Valid Stock Count");
    //       } else {
    //         // const createProductResponse = await productCreate({
    //         //   productType: productType,
    //         //   title: title,
    //         //   description: description,
    //         //   printSettings: printSettings,
    //         //   basePrice: basePrice,
    //         //   stockTypeId: stockType,
    //         //   stock: stockCount || "",
    //         //   printerTypeId: printerType,
    //         //   isColorFileAvailableId: colorFileAvailability,
    //         //   categoryId: category,
    //         //   sizeId: "",
    //         //   colorId: "",
    //         // });

    //         // if (createProductResponse?.success) {
    //         //   const productId = createProductResponse?.createdProductData._id;
    //         const productId = "123";
    //         // console.log(createProductResponse?.createdProductData._id);
    //         const createProductImageResponse = await productImageCreate({
    //           productId,
    //           images: Images,
    //           productType: productType,
    //         });
    //         console.log(createProductImageResponse);

    //         // } else {
    //         //   setSuccessMsg(null);
    //         //   setErrorMessage(createProductResponse?.message);
    //         // }
    //       }
    //     }
    //   }
    // } else if (productType === "Physical") {
    //   console.log("Hi p");
    // } else {
    // }
    setTimeout(() => {
      setSuccessMsg(null);
      setErrorMsg(null);
    }, 3000);
  }

  function handleProductTypeChangeOnClick() {
    setTitle(null);
    setDescription(null);
    setPrintSettings(null);
    setBasePrice(null);
    setStockType("0");
    setCategory("0");
    setPrinterType("0");
    setColorFileAvailability("0");
    setFiles([]); // Store selected files
    setUploadProgress({}); // Track upload progress for each file
    setErrorMessage("");

    setImages([]); // Store selected Images
    setImageUploadProgress({}); // Track upload progress for each file
    setErrorMessageImages("");
  }

  return isLoading ? (
    <PageLoading />
  ) : (
    <div className=" w-full flex flex-col justify-center items-center p-4">
      <div className=" w-full flex flex-col justify-center items-center py-4">
        <svg
          className="w-20 h-20 text-gray-100 dark:text-white"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          fill="none"
          viewBox="0 0 24 24"
        >
          <path
            stroke="currentColor"
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            d="M10 21v-9m3-4H7.5a2.5 2.5 0 1 1 0-5c1.5 0 2.875 1.25 3.875 2.5M14 21v-9m-9 0h14v8a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1v-8ZM4 8h16a1 1 0 0 1 1 1v3H3V9a1 1 0 0 1 1-1Zm12.155-5c-3 0-5.5 5-5.5 5h5.5a2.5 2.5 0 0 0 0-5Z"
          />
        </svg>
        <span className=" font-bold text-[45px] text-gray-100">
          Add Product
        </span>
      </div>
      {successMsg ? (
        <div
          className=" w-full p-4 mb-6 text-sm text-green-800 rounded-lg bg-green-50 dark:bg-gray-800 dark:text-green-400"
          role="alert"
        >
          <span className="font-medium">{successMsg}</span>
        </div>
      ) : null}
      {errorMsg ? (
        <div
          className="w-full p-4 mb-6 text-sm text-red-800 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400"
          role="alert"
        >
          <span className="font-medium">{errorMsg}</span>
        </div>
      ) : null}
      <div className=" bg-gray-200 rounded-md flex flex-row items-center px-4 w-full">
        <div className="w-full flex flex-row gap-6 py-4">
          <div className="gap-2 flex flex-row items-center">
            <input
              type="radio"
              className=" bg-white w-5 h-5 accent-yellow-400"
              id="digital"
              name="listType"
              value="Digital"
              onChange={(event) => {
                setProductType(event.target.value);
              }}
              onClick={handleProductTypeChangeOnClick}
              defaultChecked
            />
            <label className="text-gray-800 font-medium" htmlFor="digital">
              Digital
            </label>
          </div>
          <div className=" gap-4 flex flex-row items-center">
            <input
              type="radio"
              className=" bg-white w-5 h-5 accent-yellow-400"
              id="physical"
              name="listType"
              value="Physical"
              onChange={(event) => {
                setProductType(event.target.value);
              }}
            />
            <label className="text-gray-800 font-medium" htmlFor="physical">
              Physical
            </label>
          </div>
        </div>
        <div className="w-full flex flex-row justify-end">
          <button
            onClick={handleAddProductOnSubmit}
            className=" bg-yellow-400 hover:bg-yellow-500 border-black border-2 focus:right-0 focus:border-none"
          >
            Add Product
          </button>
        </div>
      </div>
      <div className="w-full flex lg:flex-row flex-col-reverse justify-center gap-4 py-4">
        <div className=" lg:w-2/3 w-full flex flex-col space-y-4">
          <div className=" bg-gray-100 w-full rounded-md p-4 space-y-4">
            <span className="text-lg font-semibold">General Information</span>
            <div className="w-full">
              <label className="text-gray-800 text-sm mb-1 block">Title</label>
              <div className="relative flex items-center">
                <input
                  onChange={(event) => {
                    setTitle(event.target.value);
                  }}
                  name="title"
                  type="text"
                  className="text-gray-800 bg-gray-200 placeholder:text-gray-500 border border-gray-300 w-full text-sm px-4 py-2.5 rounded-md outline-yellow-500"
                  placeholder="Product Title"
                />
              </div>
            </div>
            <div className="w-full">
              <label className="text-gray-800 text-sm mb-1 block">
                Description
              </label>
              <div className="relative flex items-center">
                <textarea
                  onChange={(event) => {
                    setDescription(event.target.value);
                  }}
                  name="description"
                  className="text-gray-800 bg-gray-200 placeholder:text-gray-500 border border-gray-300 w-full text-sm px-4 py-2.5 rounded-md outline-yellow-500"
                  placeholder="Product Description"
                  rows={8}
                ></textarea>
              </div>
            </div>
            <div className="w-full flex lg:flex-row flex-col lg:justify-center gap-4">
              {productType === "Physical" ? (
                <>
                  <div className="w-full bg-gray-200 p-4 space-y-3 h-full rounded-md">
                    <div className=" w-full  flex flex-row items-center gap-2 ps-2">
                      <input
                        type="checkbox"
                        id="size-variation"
                        onClick={() => {
                          setIsSizeAvailable(!isSizeAvailable);
                        }}
                        className=" w-5 h-5 bg-white accent-yellow-400"
                      />
                      <label
                        className="text-gray-800 font-medium block "
                        htmlFor="size-variation"
                      >
                        Size Variation
                      </label>
                    </div>
                    <div
                      className={` w-full ${isSizeAvailable ? "" : " pointer-events-none opacity-60"}`}
                    >
                      <div className=" w-full flex flex-row justify-evenly mb-4">
                        {sizeList?.map((sizeItem, index) => (
                          <button
                            key={index}
                            disabled={sizeItem?.status === 0}
                            className={`bg-gray-50 ${sizeItem?.status === 0 ? "text-gray-400" : "hover:bg-yellow-400"} border-none`}
                          >
                            {sizeItem?.name.charAt(0)}
                          </button>
                        ))}
                      </div>
                      <div className=" w-full flex flex-col justify-evenly space-y-3">
                        <div className=" w-full flex flex-row justify-evenly ">
                          <input
                            name="mobile"
                            type="text"
                            className="text-gray-800 bg-white border border-gray-300 w-full text-sm px-4 py-2.5 rounded-md outline-yellow-500"
                            placeholder="Enter Dimension"
                          />
                        </div>
                        {sizeList?.map((sizeItem, index) => (
                          <div
                            className=" w-full flex flex-col justify-evenly"
                            key={index}
                          >
                            <input
                              disabled={sizeItem?.status === 0}
                              type="text"
                              className="text-gray-800 bg-white border border-gray-300 w-full text-sm px-4 py-2.5 rounded-md outline-yellow-500"
                              placeholder={`${sizeItem?.name} Value in mm`}
                            />
                          </div>
                        ))}
                      </div>
                    </div>
                    <div className=" w-full">
                      <div className=" w-full flex flex-row items-center gap-2 ps-2">
                        <input
                          onClick={() => {
                            setIsColorAvailable(!isColorAvailable);
                          }}
                          type="checkbox"
                          id="single-color"
                          className=" w-5 h-5 bg-white accent-yellow-400"
                        />
                        <label className="text-gray-800 font-medium block">
                          Color Variation
                        </label>
                      </div>
                      <div
                        className={`w-full flex flex-row justify-between flex-wrap gap-2 py-4 items-center ${isColorAvailable ? "" : " pointer-events-none opacity-60"}`}
                      >
                        <div className=" flex flex-row items-center gap-1">
                          <input
                            onClick={() => {
                              setIsHandPaintedAvailable(
                                !isHandPaintedAvailable
                              );
                            }}
                            type="checkbox"
                            className=" w-5 h-5 bg-white accent-yellow-400"
                          />
                          <label className="text-gray-800 text-sm ">
                            Hand Painted
                          </label>
                        </div>
                        <div className=" flex flex-row items-center gap-1">
                          <input
                            onClick={() => {
                              setIsMultiColorAvailable(!isMultiColorAvailable);
                            }}
                            type="checkbox"
                            className=" w-5 h-5 bg-white accent-yellow-400"
                          />
                          <label className="text-gray-800 text-sm ">
                            Multi Color
                          </label>
                        </div>
                        <div className=" flex flex-row items-center gap-1">
                          <input
                            onClick={() => {
                              setIsSingleColorAvailable(
                                !isSingleColorAvailable
                              );
                            }}
                            type="checkbox"
                            className=" w-5 h-5 bg-white accent-yellow-400"
                          />
                          <label className="text-gray-800 text-sm ">
                            Single Color
                          </label>
                        </div>
                        <div className=" flex flex-row items-center gap-1">
                          <input
                            onClick={() => {
                              setIsDualTriColorAvailable(
                                !isDualTriColorAvailable
                              );
                            }}
                            type="checkbox"
                            className=" w-5 h-5 bg-white accent-yellow-400"
                          />
                          <label className="text-gray-800 text-sm ">
                            Dual/Tri Color
                          </label>
                        </div>
                        <div className=" flex flex-row items-center gap-1">
                          <input
                            onClick={() => {
                              setIsGradientRainbowColorAvailable(
                                !isGradientRainbowColorAvailable
                              );
                            }}
                            type="checkbox"
                            className=" w-5 h-5 bg-white accent-yellow-400"
                          />
                          <label className="text-gray-800 text-sm ">
                            Gradient / Rainbow Color
                          </label>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="w-full bg-gray-200 p-4 rounded-md h-full">
                    <div className="w-full">
                      <div className=" w-full">
                        <label className="text-gray-600 font-medium block ">
                          Single Color List
                        </label>
                      </div>
                      <div
                        className={`w-full mb-4 flex flex-row justify-between py-4 flex-wrap gap-2 items-center ${isSingleColorAvailable ? "" : " pointer-events-none opacity-60"}`}
                      >
                        {colorList.map((colorItem, Index) =>
                          colorItem?.type === "Single" ? (
                            <div
                              className=" flex flex-row items-center gap-1"
                              key={Index}
                            >
                              <input
                                type="checkbox"
                                className=" w-5 h-5 bg-white accent-yellow-400"
                              />
                              <label className="text-gray-800 text-sm ">
                                {colorItem?.name}
                              </label>
                            </div>
                          ) : null
                        )}
                      </div>
                      <div className=" w-full">
                        <label className="text-gray-600 font-medium block">
                          Dual / Tri Color List
                        </label>
                      </div>
                      <div
                        className={`w-full mb-4 flex flex-row justify-between py-4 flex-wrap gap-2 items-center ${isDualTriColorAvailable ? "" : " pointer-events-none opacity-60"}`}
                      >
                        {colorList.map((colorItem, Index) =>
                          colorItem?.type === "DualTri" ? (
                            <div
                              className=" flex flex-row items-center gap-1"
                              key={Index}
                            >
                              <input
                                type="checkbox"
                                className=" w-5 h-5 bg-white accent-yellow-400"
                              />
                              <label className="text-gray-800 text-sm ">
                                {colorItem?.name}
                              </label>
                            </div>
                          ) : null
                        )}
                      </div>
                      <div className=" w-full">
                        <label className="text-gray-600 font-medium block">
                          Gradient / Rainbow Color List
                        </label>
                      </div>
                      <div
                        className={`w-full flex flex-row justify-between py-4 flex-wrap gap-2 items-center ${isGradientRainbowColorAvailable ? "" : " pointer-events-none opacity-60"}`}
                      >
                        {colorList.map((colorItem, Index) =>
                          colorItem?.type === "GradientRainbow" ? (
                            <div
                              className=" flex flex-row items-center gap-1"
                              key={Index}
                            >
                              <input
                                type="checkbox"
                                className=" w-5 h-5 bg-white accent-yellow-400"
                              />
                              <label className="text-gray-800 text-sm ">
                                {colorItem?.name}
                              </label>
                            </div>
                          ) : null
                        )}
                      </div>
                    </div>
                  </div>
                </>
              ) : (
                <div className="w-full">
                  <label className="text-gray-800 text-sm mb-1 block">
                    Print Settings
                  </label>
                  <div className="relative flex items-center">
                    <textarea
                      onChange={(event) => {
                        setPrintSettings(event.target.value);
                      }}
                      name="print-settings"
                      className="text-gray-800 bg-gray-200 placeholder:text-gray-500 border border-gray-300 w-full text-sm px-4 py-2.5 rounded-md outline-yellow-500"
                      placeholder="Print Settings"
                      rows={8}
                    ></textarea>
                  </div>
                </div>
              )}
            </div>
          </div>
          <div className=" bg-gray-100 w-full rounded-md p-4 space-y-4">
            <span className="text-lg font-semibold">Pricing & Stock</span>
            <div className=" w-full flex flex-row justify-evenly gap-4">
              <div className="w-full">
                <label className="text-gray-800 text-sm mb-1 block">
                  Base Price
                </label>
                <div className="relative flex items-center">
                  <input
                    onChange={(event) => {
                      setBasePrice(event.target.value);
                    }}
                    name="base-price"
                    type="text"
                    className="text-gray-800 bg-white border border-gray-300 w-full text-sm px-4 py-2.5 rounded-md outline-yellow-500"
                    placeholder="Enter Base Price"
                  />
                </div>
              </div>
              <div className="w-full">
                <label className="text-gray-800 text-sm mb-1 block">
                  Stock Type
                </label>
                <div className="relative flex items-center">
                  <select
                    onChange={(event) => {
                      setStockType(event.target.value);
                    }}
                    id="stockType"
                    name="stockType"
                    className="text-gray-800 bg-white border border-gray-300 w-full text-sm px-4 py-2.5 rounded-md outline-yellow-500"
                  >
                    <option value="0">Select Stock Type</option>
                    <option value="1">Limited</option>
                    <option value="2">Unlimited</option>
                  </select>
                </div>
                {stockType === "1" ? (
                  <div className="relative flex items-center mt-2">
                    <input
                      onChange={(event) => {
                        setStockCount(event.target.value);
                      }}
                      name="stock-count"
                      type="text"
                      className="text-gray-800 bg-white border border-gray-300 w-full text-sm px-4 py-2.5 rounded-md outline-yellow-500"
                      placeholder="Enter Stock Count"
                    />
                  </div>
                ) : null}
              </div>
            </div>
          </div>
          {productType === "Digital" ? (
            <div className=" bg-gray-100 w-full rounded-md p-4 space-y-4">
              <span className="text-lg font-semibold">Printer Info</span>
              <div className=" w-full flex flex-row justify-evenly gap-4">
                <div className="w-full">
                  <label className="text-gray-800 text-sm mb-1 block">
                    Printer Type
                  </label>
                  <div className="relative flex items-center mb-4">
                    <select
                      onChange={(event) => {
                        setPrinterType(event.target.value);
                      }}
                      id="printerType"
                      name="printerType"
                      className="text-gray-800 bg-white border border-gray-300 w-full text-sm px-4 py-2.5 rounded-md outline-yellow-500"
                    >
                      <option value="0">Select Printer Type</option>
                      <option value="1">FDM</option>
                      <option value="2">Resin</option>
                      <option value="3">Both</option>
                    </select>
                  </div>
                  <div className="relative flex-col items-center ">
                    <label className="text-gray-800 text-sm mb-1 block">
                      Color File Availability
                    </label>
                    <select
                      onChange={(event) => {
                        setColorFileAvailability(event.target.value);
                      }}
                      id="colorFileAvailability"
                      name="colorFileAvailability"
                      className="text-gray-800 bg-white border border-gray-300 w-full text-sm px-4 py-2.5 rounded-md outline-yellow-500"
                    >
                      <option value="0">Select Color File Availability</option>
                      <option value="1">Included</option>
                      <option value="2">Not Included</option>
                    </select>
                  </div>
                </div>
              </div>
            </div>
          ) : null}
        </div>
        <div className="  lg:w-1/3 w-full bg-gray-100 rounded-md">
          <div className=" w-full rounded-md p-4">
            <span className="text-lg font-semibold">Product Images</span>
            {/* Drag and Drop Upload UI */}
            <div className="flex items-center justify-center w-full">
              <label
                htmlFor="dropzone-images"
                className="flex flex-col items-center justify-center w-full h-64 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-white dark:hover:bg-gray-800 dark:bg-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:hover:border-gray-500"
              >
                <div className="flex flex-col items-center justify-center pt-5 pb-6">
                  <svg
                    className="w-8 h-8 mb-4 text-gray-500 dark:text-gray-400"
                    aria-hidden="true"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 20 16"
                  >
                    <path
                      stroke="currentColor"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2"
                      d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2"
                    />
                  </svg>
                  <p className="mb-2 text-sm text-gray-500 dark:text-gray-400">
                    <span className="font-semibold">Click to upload</span>
                  </p>
                  <p className="text-xs text-gray-500 dark:text-gray-400">
                    .JPG .PNG .GIF .MP4 .AVI .MOV
                  </p>
                </div>
                <input
                  id="dropzone-images"
                  name="file"
                  type="file"
                  className="hidden"
                  multiple
                  formEncType="multipart/form-data"
                  onChange={handleImageChange}
                />
              </label>
            </div>

            {errorMessageImages && (
              <p className="text-red-500 text-sm mb-4">{errorMessageImages}</p>
            )}

            {/* Display Uploaded Images */}
            <div className="mt-6 space-y-4">
              {Images.length > 0 ? (
                Images.map((file) => (
                  <div
                    key={file.id}
                    className="relative border p-4 rounded shadow-sm flex items-center justify-between bg-white"
                  >
                    <div className="flex-grow flex items-center space-x-4">
                      {renderFilePreview(file)}
                      <div className="flex-grow">
                        <p className="font-medium">{file.file.name}</p>
                        <div className="w-full bg-gray-200 rounded-full h-4 mt-2">
                          <div
                            className={`h-4 ${imageUploadProgress[file.id] === 100 ? "bg-yellow-400" : "bg-yellow-400"} rounded-full transition-all duration-300 ease-in-out`}
                            style={{
                              width: `${imageUploadProgress[file.id] || 0}%`,
                            }}
                          ></div>
                        </div>
                        <p className="text-sm text-gray-600 mt-1">
                          {imageUploadProgress[file.id]
                            ? `${imageUploadProgress[file.id]}%`
                            : "Waiting to upload..."}
                        </p>
                      </div>
                    </div>
                    <a
                      onClick={() => handleImageRemove(file.id)}
                      className="absolute top-2 right-2 text-gray-500 hover:text-red-600 text-lg cursor-pointer font-bold"
                      title="Remove file"
                    >
                      ✕
                    </a>
                  </div>
                ))
              ) : (
                <p className="text-gray-600">No Images selected.</p>
              )}
            </div>
          </div>
          {productType === "Digital" ? (
            <div className=" w-full rounded-md p-4">
              <span className="text-lg font-semibold">Digital Files</span>

              {/* Drag and Drop Upload UI */}
              <div className="flex items-center justify-center w-full">
                <label
                  htmlFor="dropzone-files"
                  className="flex flex-col items-center justify-center w-full h-64 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-white dark:hover:bg-gray-800 dark:bg-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:hover:border-gray-500"
                >
                  <div className="flex flex-col items-center justify-center pt-5 pb-6">
                    <svg
                      className="w-8 h-8 mb-4 text-gray-500 dark:text-gray-400"
                      aria-hidden="true"
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 20 16"
                    >
                      <path
                        stroke="currentColor"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth="2"
                        d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2"
                      />
                    </svg>
                    <p className="mb-2 text-sm text-gray-500 dark:text-gray-400">
                      <span className="font-semibold">Click to upload</span>
                    </p>
                    <p className="text-xs text-gray-500 dark:text-gray-400">
                      .pdf .text or .zip
                    </p>
                  </div>
                  <input
                    id="dropzone-files"
                    type="file"
                    className="hidden"
                    multiple
                    formEncType="multipart/form-data"
                    onChange={handleFileChange}
                  />
                </label>
              </div>

              {errorMessage && (
                <p className="text-red-500 text-sm mb-4">{errorMessage}</p>
              )}

              {/* Display Uploaded Files */}
              <div className="mt-6 space-y-4">
                {files.length > 0 ? (
                  files.map((file) => (
                    <div
                      key={file.id}
                      className="relative border p-4 rounded shadow-sm flex items-center justify-between bg-white"
                    >
                      <div className="flex-grow">
                        <p className="font-medium">{file.file.name}</p>
                        <div className="w-full bg-gray-200 rounded-full h-4 mt-2">
                          <div
                            className={`h-4 ${uploadProgress[file.id] === 100 ? "bg-yellow-400" : "bg-yellow-400"} rounded-full transition-all duration-300 ease-in-out`}
                            style={{
                              width: `${uploadProgress[file.id] || 0}%`,
                            }}
                          ></div>
                        </div>
                        <p className="text-sm text-gray-600 mt-1">
                          {uploadProgress[file.id]
                            ? `${uploadProgress[file.id]}%`
                            : "Waiting to upload..."}
                        </p>
                      </div>
                      <a
                        onClick={() => handleRemove(file.id)}
                        className="absolute top-2 right-2 text-gray-500 hover:text-red-600 text-lg font-bold cursor-pointer"
                        title="Remove file"
                      >
                        ✕
                      </a>
                    </div>
                  ))
                ) : (
                  <p className="text-gray-600">No files selected.</p>
                )}
              </div>
            </div>
          ) : null}
          <div className=" w-full bg-gray-100 rounded-md p-4">
            <span className="text-lg font-semibold">Category</span>
            <label className="text-gray-800 text-sm mb-1 mt-4 block">
              Category
            </label>
            <select
              onChange={(event) => {
                setCategory(event.target.value);
              }}
              id="category"
              name="category"
              className="text-gray-800 bg-white border border-gray-300 w-full text-sm px-4 py-2.5 rounded-md outline-yellow-500"
            >
              <option value="0">Select Category</option>
              {categoryList?.map((categoryItem, index) => (
                <option
                  disabled={categoryItem?.status === 0}
                  key={index}
                  value={categoryItem?._id}
                >
                  {categoryItem?.name}
                </option>
              ))}
            </select>
          </div>
        </div>
      </div>
    </div>
  );
}

export default AddProducts;
